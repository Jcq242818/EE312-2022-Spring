%% Walkie-Talkie Receiver with Analog Devices FMCOMMS1
%
% This example shows how to use the Xilinx(R) Zynq-Based Radio Support
% Package with MATLAB(R) to implement a walkie-talkie receiver. The
% received signal can be transmitted by a compatible commercial
% walkie-talkie. Alternatively, the transmission can be generated by the
% companion <matlab:showdemo('sdrzWalkieTalkieTransmitter') Walkie-Talkie
% Transmitter with Analog Devices(TM) FMCOMMS1> example if you have a second SDR platform.
%
% Refer to the <matlab:sdrzdoc('sdrzspsetup') Getting
% Started> documentation for details on configuring your host computer to
% work with the Support Package for Xilinx(R) Zynq-Based Radio.

% Copyright 2014-2015 The MathWorks, Inc.


%% Introduction
%
% Walkie-talkies provide a subscription-free method of communicating over
% short distances. There are a number of different standards used around
% the world. This example uses MATLAB SDR system objects to implement two
% of these standards: *Family Radio Service* and *Personal Mobile Radio
% 446*.
%
% * *Family Radio Service (FRS):* Operates on 14 channels at frequencies
% around 462 MHz and 467 MHz. The channel spacing is 25 kHz. FRS radios are
% commonly found in the North and South America. More details on FRS can be
% found in [ <#21 1> ].
% * *Personal Mobile Radio 446 (PMR446):* Operates on 8 channels around 446
% MHz. The channel spacing is 12.5 kHz. PMR446 radios are commonly found in
% Europe. More details on PMR446 can be found in [ <#21 2> ].
%
% Both FRS and PMR446 use analog frequency modulation (FM) with a maximum
% frequency deviation of +-2.5 kHz. They also use a *Continuous Tone-Code
% Squelch System (CTCSS)* to filter unwanted signals at the receiver. CTCSS
% is implemented in this example.
%


%% Setup
%
% Before running the example, ensure you have performed the following
% steps:
%
% 1. Configure your host computer to work with the Support Package for
% Xilinx(R) Zynq-Based Radio. See <matlab:sdrzdoc('sdrzspsetup')
% Getting Started> for help.
%
% * Some additional steps may be required if you want to run two radios
% from a single host computer. See
% <matlab:sdrzdoc('sdrz_tworadios') Setup for Two Radios - One
% Host> for help.
%
% 2. Ensure that you have a suitable transmitter. This example is designed
% to work in conjunction with any of the following possible transmitters:
%
% * The <matlab:showdemo('sdrzWalkieTalkieTransmitter') Walkie-Talkie
% Transmitter with Analog Devices FMCOMMS1> MATLAB example
% * The <matlab:showdemo('sdrzWalkieTalkieTx') Walkie-Talkie Transmitter
% with Analog Devices FMCOMMS1> Simulink(R) example
% * A commercial FRS/PMR446 radio
%
% 3. Ensure that your transmitter is set to the same protocol, channel and
% CTCSS code.


%% Running the Example
%
% The example can be run by executing
% <matlab:edit('sdrzWalkieTalkieReceiver.m') sdrzWalkieTalkieReceiver.m>.
%
% Once both the transmitter and receiver are active, you should hear the
% transmitted audio on your computers default audio output device.


%% Receiver Design: System Architecture
%
% The general structure of the walkie-talkie receiver can be described as
% follows:
%
% # Receive baseband data from the SDR hardware.
% # Filter the signal to reduce noise from adjacent channels.
% # Apply AGC to the signal.
% # Filter out weak signals based on received signal power. Downstream
% processing is disabled if the signal is too weak.
% # FM Demodulate the signal.
% # Downsample the signal to a standard 8 kHz audio sample rate.
% # Perform CTCSS decoding. If the received code matches the desired code,
% pass through the audio.
% # High pass filter the audio to remove the CTCSS tone.
% # Play the audio on the computers default audio output device.
%
% The high level functionality of the receiver can be controlled by
% changing the variables in the code section below.

% Set the variables that control the receiver. 
% The protocol variable should be set to 'FRS' or 'PMR446' depending on
% which standard the transmitter is using.

protocol = 'FRS';
% protocol = 'PMR446';
channel = 1;
CTCSSCode = 5;
CTCSSDecodeBlockLength = 4000; % in samples
signalPowerThreshold = 0.1;
receiverStopTime = 20; % in seconds

% Get a structure of parameters used for controlling the receiver.
rxParams = sdrzWalkieTalkieReceiverHelper_init(protocol, channel);
%%
% By default, the example is configured to run with ZC706 and ADI FMCOMMS1
% hardware. You can uncomment one of the following lines, as applicable to
% set the |SDRDeviceName| field in structure variable |rxParams|.

% % rxParams.SDRDeviceName='ZedBoard and FMCOMMS1 RevB/C';

rxParams.SDRDeviceName = 'ZC706 and FMCOMMS1 RevB/C';
dev = sdrdev(rxParams.SDRDeviceName);
setupSession(dev);

%%
% Each component of the transmitter is described in more detail in the
% following sections.

%% 
% *SDR Receiver*
%
% An <matlab:sdrzdoc('commsdrrxzc706fmc1') SDR Receiver> system
% object is used with the named radio |'ZC706 and FMCOMMS1 RevB/C'| to
% receive baseband data from the SDR hardware. The SDR hardware is configured to use an
% intermediate frequency of 10 MHz. See
SDRReceiver = sdrrx(rxParams.SDRDeviceName,...
    'IPAddress',              '192.168.3.2', ...
    'CenterFrequency',        rxParams.radioCenterFrequency, ...
    'Gain',                   5, ...
    'ADCRate',                rxParams.radioADCRate, ...
    'IntermediateFrequency',  rxParams.radioIntermediateFrequency, ...
    'DecimationFactor',       rxParams.radioDecimationFactor, ...
    'OutputDataType',         'single', ...
    'FrameLength',            rxParams.radioFrameSize, ...
    'BypassUserLogic',        true);

%%
% *Channel Filter*
%
% The channel filter is used to attenuate signals from adjacent channels.
% FRS uses a channel separation of 25 kHz, while PMR446 uses a channel
% separation of 12.5 kHz. Making the channel filter a low pass filter with
% a cutoff frequency of 6 kHz gives a good tradeoff between adjacent
% channel attenuation and filter length.
channelFilter = rxParams.channelFilter;

%%
% *Automatic Gain Control (AGC)*
%
% Automatic gain controller applies a variable gain to the received signal
% to assure that the received signal amplitude is at a known level. 
AGC = comm.AGC;

%% 
% *FM Demodulation*
%
% This example implements FM demodulation by taking the phase difference of
% consecutive complex samples. A delay system object is used to delay the
% received baseband signal to prepare for the phase difference calculation.
unitDelay = dsp.Delay;

%%
% *Software Downsampling*
%
% A decimation filter converts the sampling rate to 8 kHz. This rate is one
% of the native sampling rates of your host computers output audio device.
% Use an FIR decimator system object to convert the 80 kHz signal to an 8
% kHz signal. 
softwareDecimator = dsp.FIRDecimator(rxParams.softwareDecimationFactor, ...
    rxParams.decimationCoefficients);

%% 
% *Continuous Tone-Coded Squelch System (CTCSS)*
%
% The CTCSS [ <#21 3> ] decoder computes the power at each CTCSS
% tone frequency using the Goertzel algorithm [ <#21 4> ] and
% outputs the code with the largest power. The Goertzel algorithm provides
% an efficient method to compute the frequency components at predetermined
% frequencies, i.e. the tone code frequencies used by CTCSS. The CTCSS
% decoder is implemented as a custom system object,
% <matlab:edit('sdrzWalkieTalkieReceiverHelper_CTCSSDecoder.m')
% sdrzWalkieTalkieReceiverHelper_CTCSSDecoder.m>.
CTCSSDecoder = sdrzWalkieTalkieReceiverHelper_CTCSSDecoder(...
    'MinimumBlockLength', CTCSSDecodeBlockLength, ...
    'SampleRate',         rxParams.audioSampleRate);

%%
% *CTCSS Filter*
%
% A high pass filter with a cutoff frequency of 260 Hz filters out the
% CTCSS tones, which have a maximum frequency of 250 Hz.
CTCSSFilter = rxParams.CTCSSFilter;
 
%%
% *Audio Output*
%
% An audio device writer system object is used to play the received signal
% through your computers speakers. If you do not hear any sound, select
% another device using the Device property of the audio device writer
% object, _audioPlayer_.
audioPlayer = audioDeviceWriter(rxParams.audioSampleRate);

%%
% *Reception and Baseband Processing*
%
% The actual reception and processing of the data is enclosed in a
% try/catch block. This means that if there is an error, the system objects
% still get released properly.
%
% By enclosing the data reception and processing in a while loop controlled
% using a tic/toc pair, the receiver will run for approximately the desired
% real world time.
try
    % The first step call on the SDR receiver object does some initial
    % setup and takes about 4s. Calling the step method once and discarding
    % the data means the setup time is not included as part of the desired
    % run time.
    [~, ~] = step(SDRReceiver);
    display('Starting reception')
    tic; % start timing the transmission
    while toc < receiverStopTime
        [data, len, lostSamples] = step(SDRReceiver);
        if lostSamples ~= 0
            disp('Unable process data in real time!')
        end
        if len > 0
            % Channel filter
            outChanFilt = step(channelFilter, data);
            % AGC
            outAGC = step(AGC, outChanFilt);
            % Check the received signal power. Only attempt to decode if
            % the received signal is strong enough.
            rxAmp       = mean(abs(outAGC));
            if rxAmp > signalPowerThreshold
                % FM demodulate
                outDelay  = step(unitDelay, outAGC);
                demodulatedSignal = angle(outDelay .* conj(outAGC));
                % Downsample to 8 kHz
                outRawAudio   = step(softwareDecimator, demodulatedSignal);
                
                % CTCSS decoder
                receivedCode = step(CTCSSDecoder, outRawAudio);
%                 fprintf('Detected CTCSS Code %d\n',receivedCode);
                if (receivedCode == CTCSSCode) || (CTCSSCode == 0)
                    % Output to audio device
                    audioSignal = step(CTCSSFilter, outRawAudio);
                    step(audioPlayer, audioSignal);
                end
            end
        end
    end
    disp('Finished reception')
catch ME
    rethrow(ME)
end
% Release system objects associated with hardware
release(audioPlayer);
release(SDRReceiver);


%% Receiver Design: System Sample Rates
%
% The system has three different sample rates:
%
% # The SDR hardware ADC rate, *40.96 MHz*
% # The SDR hardware baseband rate, *80 kHz*
% # The audio sample rate, *8 kHz*
%
% The downsample by 10 from 80 kHz to 8 kHz is done in software using a
% <matlab:doc('dsp.FIRDecimator') dsp.FIRDecimator> object,
% _softwareDecimator_. The radio baseband
% rate of 80 kHz is necessary for two reasons:
%
% # By Carson's rule, the approximate passband bandwidth of the desired FM
% signal is 2*(frequencyDeviation + peakAudioFrequency). In this example,
% that equates to a signal bandwidth of _2*(2.5e3 + 4e3) = 13 kHz_. This
% means we need to use a sample rate greater than 13 kHz.
% # The sample rates in software have no relation to the real world
% transmission rates. The actually reception rate is determined entirely by
% the SDR hardware ADC rate and the SDR hardware decimation factor. To make
% the software sample rates meaningful, the sample rates at the
% software/hardware interface must match. For the FMCOMMS1, the lowest
% possible baseband sample rate that is a multiple of 8 kHz that is greater
% than 13 kHz is 80 kHz. Using an integer downsampling factor means a
% smaller decimation filter (less taps) can be used.
%
%% Things to Try
%
% To modify the example, save a local copy of
% <matlab:edit('sdrzWalkieTalkieReceiver')
% sdrzWalkieTalkieReceiver.m>. Some possible modifications include:
%
% * Try changing the channel by changing the _channel_ variable.
% * Try changing the CTCSS code by changing the _CTCSSCode_ variable. Note
% that the receiver will not play the transmission out loud unless it has
% the same CTCSS code as the transmitter, or it has CTCSS disabled by
% setting the code to 0.
% * Try changing the _CTCSSDecodeBlockLength_ variable, which is used to
% control the number of samples used in the Goertzel algorithm for
% detecting the CTCSS tones. Larger values result in a finer frequency
% resoultion and therefore better tone detection, at the expense of
% increased latency. For example, the default value of 4000 results in a
% delay of 0.5s.


%% Alternative Implementations
%
% This example implements a walkie-talkie receiver in MATLAB. You can
% also view the equivalent system implemented using Simulink in the
% <matlab:showdemo('sdrzWalkieTalkieRx') Walkie-Talkie Receiver with Analog Devices FMCOMMS1 using Simulink> example.


%% Troubleshooting the Example
%
% If you cannot hear the transmitted signal on your receiver, try the
% following:
%
% * Make sure that the transmitter and the receiver are set to the same
% protocol, channel and CTCSS code.
% * Disable CTCSS on the receiver by setting the code to 0. Note that
% codes higher than 38 use Digital Coded Squelch, which is not implemented
% in this example. You can also uncomment the _fprintf_ statement in the
% baseband processing loop to display the detected CTCSS code in the MATLAB
% command window.
% * Set the _signalPowerThreshold_ variable to 0 to disable filtering out
% weak signals. Try adjusting the value to achieve a good tradeoff between
% playing valid received signals and blocking noise when the received
% signal is too weak.
% * Try varying the gain of the _SDRReceiver_ object depending on your
% received signal strength.
%
% General tips for troubleshooting SDR hardware can be found in
% <matlab:sdrzdoc('sdrz_troubleshoot') Xilinx Zynq-Based Radio Processing
% Errors and Fixes>.

%% List of Example Helper Files
%
% This example uses the following helper functions
%
% * <matlab:edit('sdrzWalkieTalkieHelper_Channel2Frequency.m')
% sdrzWalkieTalkieHelper_Channel2Frequency.m>: converts a channel number to
% an RF frequency.
% * <matlab:edit('sdrzWalkieTalkieReceiverHelper_init.m')
% sdrzWalkieTalkieReceiverHelper_init.m>: get a structure of parameters
% used to control the receiver.
% * <matlab:edit('sdrzWalkieTalkieReceiverHelper_CTCSSDecoder.m')
% sdrzWalkieTalkieReceiverHelper_CTCSSDecoder.m>: a custom system object to
% detect CTCSS tones in an audio stream.

%% References
%
% # <http://en.wikipedia.org/wiki/Family_Radio_Service Family Radio
% Service> on Wikipedia(R)
% # <http://en.wikipedia.org/wiki/PMR446 PMR446> on Wikipedia
% # <http://en.wikipedia.org/wiki/Continuous_Tone-Coded_Squelch_System
% Continuous Tone-Coded Squelch System> on Wikipedia
% # <http://en.wikipedia.org/wiki/Goertzel_algorithm Goertzel Algorithm> on
% Wikipedia

displayEndOfDemoMessage(mfilename)
