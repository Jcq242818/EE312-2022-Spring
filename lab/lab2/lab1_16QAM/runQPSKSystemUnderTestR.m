function BER = runQPSKSystemUnderTestR(prmQPSKTxRx, useScopes, printData)

% Copyright 2012-2014 The MathWorks, Inc.

%#codegen 

persistent hTx hChan hRx hScopes 
coder.extrinsic('createQPSKScopes','stepQPSKScopes','releaseQPSKScopes')
if isempty(hTx)
    % Initialize the components
    % Create and configure the transmitter System object
    hTx = QPSKTransmitterR(...
        'UpsamplingFactor', prmQPSKTxRx.Upsampling, ...
        'MessageLength', prmQPSKTxRx.MessageLength, ...
        'TransmitterFilterCoefficients',prmQPSKTxRx.TransmitterFilterCoefficients, ...
        'DataLength', prmQPSKTxRx.DataLength, ...
        'ScramblerBase', prmQPSKTxRx.ScramblerBase, ...
        'ScramblerPolynomial', prmQPSKTxRx.ScramblerPolynomial, ...
        'ScramblerInitialConditions', prmQPSKTxRx.ScramblerInitialConditions);
    
    % Create and configure the AWGN channel System object
    hChan = QPSKChannelR('DelayType', prmQPSKTxRx.DelayType, ...
        'RaisedCosineFilterSpan', prmQPSKTxRx.RaisedCosineFilterSpan, ...
        'PhaseOffset', prmQPSKTxRx.PhaseOffset, ...
        'SignalPower', 1/prmQPSKTxRx.Upsampling, ...
        'FrameSize', prmQPSKTxRx.FrameSize, ...
        'UpsamplingFactor', prmQPSKTxRx.Upsampling, ...
        'EbNo', prmQPSKTxRx.EbNo, ...
        'BitsPerSymbol', prmQPSKTxRx.Upsampling/prmQPSKTxRx.Downsampling, ...
        'FrequencyOffset', prmQPSKTxRx.FrequencyOffset, ...
        'SampleRate', prmQPSKTxRx.Fs);

    % Create and configure the receiver System object
    hRx = QPSKReceiverR('DesiredAmplitude', 1/sqrt(prmQPSKTxRx.Upsampling), ...
        'ModulationOrder', prmQPSKTxRx.M, ...
        'DownsamplingFactor', prmQPSKTxRx.Downsampling, ...
        'CoarseCompFrequencyResolution', prmQPSKTxRx.CoarseCompFrequencyResolution, ...
        'PhaseRecoveryDampingFactor', prmQPSKTxRx.PhaseRecoveryDampingFactor, ...
        'PhaseRecoveryLoopBandwidth', prmQPSKTxRx.PhaseRecoveryLoopBandwidth, ...
        'TimingRecoveryDampingFactor', prmQPSKTxRx.TimingRecoveryDampingFactor, ...
        'TimingRecoveryLoopBandwidth', prmQPSKTxRx.TimingRecoveryLoopBandwidth, ...
        'TimingErrorDetectorGain', prmQPSKTxRx.TimingErrorDetectorGain, ...
        'PostFilterOversampling', prmQPSKTxRx.Upsampling/prmQPSKTxRx.Downsampling, ...
        'FrameSize', prmQPSKTxRx.FrameSize, ...
        'BarkerLength', prmQPSKTxRx.BarkerLength, ...
        'MessageLength', prmQPSKTxRx.MessageLength, ...
        'SampleRate', prmQPSKTxRx.Fs, ...
        'DataLength', prmQPSKTxRx.DataLength, ...
        'ReceiverFilterCoefficients', prmQPSKTxRx.ReceiverFilterCoefficients, ...
        'DescramblerBase', prmQPSKTxRx.ScramblerBase, ...
        'DescramblerPolynomial', prmQPSKTxRx.ScramblerPolynomial, ...
        'DescramblerInitialConditions', prmQPSKTxRx.ScramblerInitialConditions,...
        'PrintOption', printData);    
    
    if useScopes
        % Create the System object for plotting all the scopes
        hScopes = QPSKScopesR;
    end
end

hRx.PrintOption = printData;

for count = 1:prmQPSKTxRx.FrameCount
    transmittedSignal = step(hTx); % Transmitter
    corruptSignal = step(hChan, transmittedSignal, count); % AWGN Channel
    [RCRxSignal,coarseCompBuffer, timingRecBuffer,BER] = step(hRx,corruptSignal); % Receiver
    if useScopes
        stepQPSKScopes(hScopes,RCRxSignal,coarseCompBuffer, timingRecBuffer); % Plots all the scopes
    end
end
if isempty(coder.target)
    release(hTx);
    release(hChan);
    release(hRx);
end
if useScopes
     releaseQPSKScopes(hScopes);
end